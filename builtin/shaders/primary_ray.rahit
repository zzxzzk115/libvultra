#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

#include "lib/bda_vertex.glsl"

layout(set = 3, binding = 0) uniform accelerationStructureEXT topLevelAS;

struct GPUMaterial {
    uint albedoIndex;
    uint alphaMaskIndex;
    uint metallicIndex;
    uint roughnessIndex;
    uint specularIndex;
    uint normalIndex;
    uint aoIndex;
    uint emissiveIndex;
    uint metallicRoughnessIndex;

    uint padding0; // padding
    uint padding1; // padding
    uint padding2; // padding

    vec4  baseColor;
    vec4  emissiveColorIntensity;
    vec4  ambientColor;
    float opacity;
    float metallicFactor;
    float roughnessFactor;
    float ior;
    int   doubleSided;
};
layout(set = 2, binding = 0) buffer Materials { GPUMaterial materials[]; };

struct GPUGeometryNode {
    uint64_t vertexBufferAddress;
    uint64_t indexBufferAddress;
    uint materialIndex;
};
layout(set = 2, binding = 1) buffer GeometryNodes { GPUGeometryNode geometryNodes[]; };

layout(set = 2, binding = 2) uniform sampler2D textures[70]; // TODO: Variable length

hitAttributeEXT vec2 attribs;

void main()
{
	const uint geomIndex = gl_GeometryIndexEXT;
    GPUGeometryNode node = geometryNodes[nonuniformEXT(geomIndex)];
    GPUMaterial mat = materials[nonuniformEXT(node.materialIndex)];

	Vertex v0 = fromBufferDeviceAddresses(node.vertexBufferAddress, node.indexBufferAddress, 0);
	Vertex v1 = fromBufferDeviceAddresses(node.vertexBufferAddress, node.indexBufferAddress, 1);
	Vertex v2 = fromBufferDeviceAddresses(node.vertexBufferAddress, node.indexBufferAddress, 2);

	vec2 uv = (1.0 - attribs.x - attribs.y) * v0.texCoord + attribs.x * v1.texCoord + attribs.y * v2.texCoord;
    vec4 albedoWithAlpha = mat.albedoIndex > 0 ? texture(textures[nonuniformEXT(mat.albedoIndex)], uv) : mat.baseColor;
    if (albedoWithAlpha.a < 0.5)
    {
        ignoreIntersectionEXT; // alpha cutout
    }
}